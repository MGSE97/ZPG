.TH "Application::Engines::CameraEngine" 3 "Sat Nov 3 2018" "Version 4.0" "ZPG" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Application::Engines::CameraEngine
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CameraEngine\&.h>\fP
.PP
Inherits \fBEngine::BaseEngine\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBBaseEngine\fP * \fBDispose\fP ()"
.br
.ti -1c
.RI "\fBCameraEngine\fP * \fBInit\fP (std::FILE *errorStream=stderr) override"
.br
.ti -1c
.RI "bool \fBInitSuccess\fP ()"
.br
.ti -1c
.RI "virtual void \fBSetActiveScene\fP (Components::Scene *scene=nullptr)"
.br
.ti -1c
.RI "virtual void \fBStart\fP ()"
.br
.ti -1c
.RI "void \fBUpdate\fP (::\fBEngine::Components::Window\fP *window) override"
.br
.ti -1c
.RI "virtual void \fBUpdate\fP (Components::Window *window)"
.br
.ti -1c
.RI "virtual void \fBUpdateBegin\fP (Components::Window *window)"
.br
.ti -1c
.RI "virtual void \fBUpdateEnd\fP (Components::Window *window)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "Components::Scene * \fBActiveScene\fP"
.br
.ti -1c
.RI "\fBGeneric::Collection\fP< Components::IInputHandler * > * \fBInputHandlers\fP"
.br
.ti -1c
.RI "\fBGeneric::Dictionary\fP< short, bool > \fBKeys\fP"
.br
.ti -1c
.RI "\fBGeneric::Dictionary\fP< short, bool > \fBMouseKeys\fP"
.br
.ti -1c
.RI "double \fBMouseX\fP"
.br
.ti -1c
.RI "double \fBMouseY\fP"
.br
.ti -1c
.RI "\fBGeneric::Dictionary\fP< std::string, Components::Graphics::Program * > * \fBPrograms\fP"
.br
.ti -1c
.RI "\fBGeneric::Dictionary\fP< std::string, Components::Scene * > * \fBScenes\fP"
.br
.ti -1c
.RI "\fBGeneric::Dictionary\fP< std::string, Components::Graphics::Shader * > * \fBShaders\fP"
.br
.ti -1c
.RI "\fBGeneric::Dictionary\fP< std::string, Components::Window * > * \fBWindows\fP"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "float \fBangle\fP"
.br
.ti -1c
.RI "glm::mat4 \fBM\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 8 of file CameraEngine\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBEngine::BaseEngine\fP * Engine::BaseEngine::Dispose ()\fC [inherited]\fP"

.PP
Definition at line 51 of file BaseEngine\&.cpp\&.
.PP
.nf
52 {
53     glfwTerminate();
54     return this;
55 }
.fi
.SS "\fBApplication::Engines::CameraEngine\fP * Application::Engines::CameraEngine::Init (std::FILE * errorStream = \fCstderr\fP)\fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBEngine::BaseEngine\fP\&.
.PP
Definition at line 9 of file CameraEngine\&.cpp\&.
.PP
References Engine::BaseEngine::ActiveScene, angle, Engine::Components::Scene::BeginLoad(), Engine::Components::Scene::Cameras, Generic::Dictionary< TKey, TValue >::First(), fragment_shader, M, Engine::Components::Objects::VertexObject::Material, Engine::Components::Scene::Objects, Engine::BaseEngine::Programs, Engine::BaseEngine::Scenes, Engine::BaseEngine::SetActiveScene(), Engine::BaseEngine::Shaders, Assets::ShadersFragment, Assets::ShadersVertex, Engine::Components::Graphics::Material::Values, vertex_shader, and Engine::BaseEngine::Windows\&.
.PP
.nf
10 {
11     BaseEngine::Init(errorStream);
12 
13     const char* vertex_shader =
14         "#version 330\n"
15         "layout(location=0) in vec3 vp;"
16         "out vec3 ex_WorldPos;"
17         "uniform mat4 modelMatrix;"
18         "uniform mat4 viewMatrix;"
19         "uniform mat4 projectionMatrix;"
20         "void main () {"
21         " gl_Position = (projectionMatrix * viewMatrix * modelMatrix) * vec4 (vp, 1\&.0);"
22         "}";
23 
24     const char* fragment_shader =
25         "#version 330\n"
26         "uniform float color;"
27         "out vec4 frag_colour;"
28         "void main () {"
29         "     frag_colour = vec4 (color, 1\&.0-color, 0\&.0, 1\&.0);"
30         "}";
31 
32     M = glm::mat4(1\&.0f);
33     angle = 0\&.0f;
34 
35     Windows->Add("zpg", (new ::Engine::Components::Window(800, 600, "ZPG - Camera", 100\&.0f))
36         ->Show()
37         ->Info(std::cout)
38     );
39 
40     auto* vertex = new Engine::Components::Graphics::Shader(GL_VERTEX_SHADER, Assets::ShadersVertex + "Camera\&.glsl");
41     Shaders->Add("vertex", vertex);
42     Shaders->Add("fragment", new Engine::Components::Graphics::Shader(GL_FRAGMENT_SHADER, Assets::ShadersFragment + "Basic\&.glsl"));
43 
44     Programs->Add("basic", (new Engine::Components::Graphics::Program())->AddShaders(Shaders));
45 
46     Scenes->Add("triangle", new Scenes::TriangleScene());
47     Scenes->Add("sphere", new Scenes::SphereScene());
48 
49     SetActiveScene(Scenes->Get("sphere"));
50 
51     ActiveScene->BeginLoad(this);
52 
53     ActiveScene->Cameras->Add("main", (new Engine::Components::Camera())
54 //      ->SetPosition(new glm::vec3(2\&.5f, 2\&.5f, 2\&.f))
55         ->SetPosition(new glm::vec3(0\&.f, 1\&.5f, 4\&.f))
56         ->SetDirection(new glm::vec3(0\&.f, 0\&.f, 0\&.f))
57         ->SetUp(new glm::vec3(0\&.f, 0\&.f, 1\&.f)));
58 
59     ActiveScene->Objects->First()
60         ->Material->Values
61         ->Add(
62             new Engine::Components::Graphics::MaterialValue<glm::mat4>(
63                 vertex,
64                 "viewMatrix",
65                 ActiveScene->Cameras->First()->Value)
66         )\&.Add(
67             new Engine::Components::Graphics::MaterialValue<glm::mat4>(
68                 vertex,
69                 "projectionMatrix",
70                 new glm::mat4(glm::perspective(glm::radians(90\&.0f), 4\&.0f / 3\&.0f, 0\&.1f, 100\&.0f)))
71         );
72     return this;
73 }
.fi
.SS "bool Engine::BaseEngine::InitSuccess ()\fC [inherited]\fP"

.PP
Definition at line 46 of file BaseEngine\&.cpp\&.
.PP
.nf
47 {
48     return _init;
49 }
.fi
.SS "void Engine::BaseEngine::SetActiveScene (\fBComponents::Scene\fP * scene = \fCnullptr\fP)\fC [virtual]\fP, \fC [inherited]\fP"

.PP
Definition at line 132 of file BaseEngine\&.cpp\&.
.PP
Referenced by Application::Engines::BasicEngine::Init(), Application::Engines::ZPGEngine::Init(), Init(), Application::Engines::TriangleEngine::Init(), and Application::Engines::LightEngine::Init()\&.
.PP
.nf
133 {
134     if (scene == nullptr && !Scenes->empty())
135         ActiveScene = Scenes->begin()->second;
136     else
137         ActiveScene = scene;        
138 }
.fi
.SS "void Engine::BaseEngine::Start ()\fC [virtual]\fP, \fC [inherited]\fP"

.PP
Definition at line 126 of file BaseEngine\&.cpp\&.
.PP
Referenced by main()\&.
.PP
.nf
127 {
128     system("cls");
129     UpdateInternal();
130 }
.fi
.SS "void Application::Engines::CameraEngine::Update (::\fBEngine::Components::Window\fP * window)\fC [override]\fP"

.PP
Definition at line 75 of file CameraEngine\&.cpp\&.
.PP
References Engine::Components::Window::Height, and Engine::Components::Window::Width\&.
.PP
.nf
76 {
77     if (ActiveScene != nullptr && ActiveScene->Objects != nullptr && !ActiveScene->Objects->empty())
78         for (auto& it : *ActiveScene->Objects)
79         {
80             //auto _fi = atan2(MouseY, MouseX);
81             //auto _psi = atan2(MouseX, MouseY);
82             //auto _fi = glm::radians(MouseX);
83             //auto _psi = glm::radians(MouseY);
84             auto _fi = (MouseX / window->Height);
85             auto _psi =(MouseY / window->Width);
86 
87             std::cout << "FI:  " << _fi << "\nPSI: " << _psi << "\nObject: " << it\&.first << std::endl;
88 
89             ActiveScene->Cameras->First()->SetDirection(new glm::vec3(cos(_fi), sin(_fi), cos(_psi)));
90 
91             auto object = it\&.second;
92             object->Draw();
93 
94             /*auto pm = glm::perspective(glm::radians(90\&.0f), 4\&.0f / 3\&.0f, 0\&.1f, 100\&.0f);
95             auto c = ActiveScene->Cameras->First()->Value;
96             Shaders->Get("vertex")->SendUniform(Programs->First(), "viewMatrix", c);
97             Shaders->Get("vertex")->SendUniform(Programs->First(), "projectionMatrix", &pm);*/
98             angle += 0\&.1f;
99         }
100 }
.fi
.SS "void Engine::BaseEngine::Update (\fBComponents::Window\fP * window)\fC [virtual]\fP, \fC [inherited]\fP"

.PP
Definition at line 112 of file BaseEngine\&.cpp\&.
.PP
.nf
113 {
114 }
.fi
.SS "void Engine::BaseEngine::UpdateBegin (\fBComponents::Window\fP * window)\fC [virtual]\fP, \fC [inherited]\fP"

.PP
Definition at line 57 of file BaseEngine\&.cpp\&.
.PP
References Engine::Components::Window::Get()\&.
.PP
.nf
58 {
59     // Scene
60     ActiveScene->BeginLoad(this);
61 
62     // Buffers
63     glEnable(GL_DEPTH_TEST);
64     glDepthFunc(GL_LESS);
65     glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
66 
67     // Input
68     short mouseKeysActive = 0;
69     glfwGetCursorPos(window->Get(), &MouseX, &MouseY);
70     for(short i = 0; i < 8; i++)
71     {
72         const int state = glfwGetMouseButton(window->Get(), i);
73         auto value = MouseKeys[i];
74         // flip state
75         if (state == GLFW_PRESS && !value)
76             MouseKeys\&.Add(i, true);
77         else if (state == GLFW_RELEASE && value)
78             MouseKeys\&.Add(i, false);
79         if (MouseKeys[i])
80             mouseKeysActive++;
81     }
82     short keysActive = 0;
83     SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), { 40, keysActive });
84     fprintf(_errorStream, "                           ");
85     for (short i = 1; i < 512; i++)
86     {
87         const int state = glfwGetKey(window->Get(), i);
88         auto value = Keys[i];
89         // flip state
90         if (state == GLFW_PRESS && !value)
91             Keys\&.Add(i, true);
92         else if (state == GLFW_RELEASE && value)
93             Keys\&.Add(i, false);
94         if (Keys[i])
95             keysActive++;
96     }
97     bool handleKeys = true,
98          handleMouse = true;
99     for (auto handler : *InputHandlers)
100     {
101         if(handleKeys)
102             handleKeys = handler->HandleKeys(this, window, ActiveScene, Keys, keysActive);
103         if(handleMouse)
104             handleMouse = handler->HandleMouse(this, window, ActiveScene, MouseX, MouseY, MouseKeys, mouseKeysActive);
105         if(!handleKeys && !handleMouse)
106             break;
107     }
108 
109     SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), { 0,0 });
110 }
.fi
.SS "void Engine::BaseEngine::UpdateEnd (\fBComponents::Window\fP * window)\fC [virtual]\fP, \fC [inherited]\fP"

.PP
Definition at line 116 of file BaseEngine\&.cpp\&.
.PP
References Engine::Components::Window::Get()\&.
.PP
.nf
117 {
118     // update other events like input handling
119     glfwPollEvents();
120     // put the stuff we’ve been drawing onto the display
121     glfwSwapBuffers(window->Get());
122 
123     ActiveScene->FrameUpdate(this);
124 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "Components::Scene* Engine::BaseEngine::ActiveScene\fC [inherited]\fP"

.PP
Definition at line 34 of file BaseEngine\&.h\&.
.PP
Referenced by Engine::BaseEngine::BaseEngine(), Init(), and Application::Engines::LightEngine::Init()\&.
.SS "float Application::Engines::CameraEngine::angle\fC [private]\fP"

.PP
Definition at line 15 of file CameraEngine\&.h\&.
.PP
Referenced by Init()\&.
.SS "\fBGeneric::Collection\fP<Components::IInputHandler*>* Engine::BaseEngine::InputHandlers\fC [inherited]\fP"

.PP
Definition at line 31 of file BaseEngine\&.h\&.
.PP
Referenced by Engine::BaseEngine::BaseEngine(), and Application::Engines::LightEngine::Init()\&.
.SS "\fBGeneric::Dictionary\fP<short, bool> Engine::BaseEngine::Keys\fC [inherited]\fP"

.PP
Definition at line 32 of file BaseEngine\&.h\&.
.PP
Referenced by Engine::BaseEngine::BaseEngine()\&.
.SS "glm::mat4 Application::Engines::CameraEngine::M\fC [private]\fP"

.PP
Definition at line 14 of file CameraEngine\&.h\&.
.PP
Referenced by Init()\&.
.SS "\fBGeneric::Dictionary\fP<short, bool> Engine::BaseEngine::MouseKeys\fC [inherited]\fP"

.PP
Definition at line 33 of file BaseEngine\&.h\&.
.PP
Referenced by Engine::BaseEngine::BaseEngine()\&.
.SS "double Engine::BaseEngine::MouseX\fC [inherited]\fP"

.PP
Definition at line 35 of file BaseEngine\&.h\&.
.SS "double Engine::BaseEngine::MouseY\fC [inherited]\fP"

.PP
Definition at line 36 of file BaseEngine\&.h\&.
.SS "\fBGeneric::Dictionary\fP<std::string, Components::Graphics::Program*>* Engine::BaseEngine::Programs\fC [inherited]\fP"

.PP
Definition at line 28 of file BaseEngine\&.h\&.
.PP
Referenced by Engine::BaseEngine::BaseEngine(), Application::Input::Handlers::CameraInputHandler::HandleMouse(), Application::Engines::TriangleEngine::Init(), Application::Engines::BasicEngine::Init(), Init(), Application::Engines::ZPGEngine::Init(), Application::Engines::LightEngine::Init(), Application::Scenes::TriangleScene::Load(), and Application::Scenes::SphereScene::Load()\&.
.SS "\fBGeneric::Dictionary\fP<std::string, Components::Scene*>* Engine::BaseEngine::Scenes\fC [inherited]\fP"

.PP
Definition at line 30 of file BaseEngine\&.h\&.
.PP
Referenced by Engine::BaseEngine::BaseEngine(), Application::Engines::ZPGEngine::Init(), Init(), Application::Engines::BasicEngine::Init(), Application::Engines::TriangleEngine::Init(), and Application::Engines::LightEngine::Init()\&.
.SS "\fBGeneric::Dictionary\fP<std::string, Components::Graphics::Shader*>* Engine::BaseEngine::Shaders\fC [inherited]\fP"

.PP
Definition at line 29 of file BaseEngine\&.h\&.
.PP
Referenced by Engine::BaseEngine::BaseEngine(), Application::Input::Handlers::CameraInputHandler::HandleMouse(), Init(), Application::Engines::BasicEngine::Init(), Application::Engines::ZPGEngine::Init(), Application::Engines::TriangleEngine::Init(), and Application::Engines::LightEngine::Init()\&.
.SS "\fBGeneric::Dictionary\fP<std::string, Components::Window*>* Engine::BaseEngine::Windows\fC [inherited]\fP"

.PP
Definition at line 27 of file BaseEngine\&.h\&.
.PP
Referenced by Engine::BaseEngine::BaseEngine(), Application::Engines::ZPGEngine::Init(), Init(), Application::Engines::BasicEngine::Init(), Application::Engines::TriangleEngine::Init(), and Application::Engines::LightEngine::Init()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for ZPG from the source code\&.
